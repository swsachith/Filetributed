/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lk.filetributed.client.rpc.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-7")
public class messageProtocol implements org.apache.thrift.TBase<messageProtocol, messageProtocol._Fields>, java.io.Serializable, Cloneable, Comparable<messageProtocol> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("messageProtocol");

  private static final org.apache.thrift.protocol.TField MY_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("myIP", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("myPort", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new messageProtocolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new messageProtocolTupleSchemeFactory());
  }

  public String myIP; // required
  public int myPort; // required
  public String entries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MY_IP((short)1, "myIP"),
    MY_PORT((short)2, "myPort"),
    ENTRIES((short)3, "entries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MY_IP
          return MY_IP;
        case 2: // MY_PORT
          return MY_PORT;
        case 3: // ENTRIES
          return ENTRIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MY_IP, new org.apache.thrift.meta_data.FieldMetaData("myIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_PORT, new org.apache.thrift.meta_data.FieldMetaData("myPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(messageProtocol.class, metaDataMap);
  }

  public messageProtocol() {
  }

  public messageProtocol(
    String myIP,
    int myPort,
    String entries)
  {
    this();
    this.myIP = myIP;
    this.myPort = myPort;
    setMyPortIsSet(true);
    this.entries = entries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public messageProtocol(messageProtocol other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMyIP()) {
      this.myIP = other.myIP;
    }
    this.myPort = other.myPort;
    if (other.isSetEntries()) {
      this.entries = other.entries;
    }
  }

  public messageProtocol deepCopy() {
    return new messageProtocol(this);
  }

  @Override
  public void clear() {
    this.myIP = null;
    setMyPortIsSet(false);
    this.myPort = 0;
    this.entries = null;
  }

  public String getMyIP() {
    return this.myIP;
  }

  public messageProtocol setMyIP(String myIP) {
    this.myIP = myIP;
    return this;
  }

  public void unsetMyIP() {
    this.myIP = null;
  }

  /** Returns true if field myIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMyIP() {
    return this.myIP != null;
  }

  public void setMyIPIsSet(boolean value) {
    if (!value) {
      this.myIP = null;
    }
  }

  public int getMyPort() {
    return this.myPort;
  }

  public messageProtocol setMyPort(int myPort) {
    this.myPort = myPort;
    setMyPortIsSet(true);
    return this;
  }

  public void unsetMyPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYPORT_ISSET_ID);
  }

  /** Returns true if field myPort is set (has been assigned a value) and false otherwise */
  public boolean isSetMyPort() {
    return EncodingUtils.testBit(__isset_bitfield, __MYPORT_ISSET_ID);
  }

  public void setMyPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYPORT_ISSET_ID, value);
  }

  public String getEntries() {
    return this.entries;
  }

  public messageProtocol setEntries(String entries) {
    this.entries = entries;
    return this;
  }

  public void unsetEntries() {
    this.entries = null;
  }

  /** Returns true if field entries is set (has been assigned a value) and false otherwise */
  public boolean isSetEntries() {
    return this.entries != null;
  }

  public void setEntriesIsSet(boolean value) {
    if (!value) {
      this.entries = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MY_IP:
      if (value == null) {
        unsetMyIP();
      } else {
        setMyIP((String)value);
      }
      break;

    case MY_PORT:
      if (value == null) {
        unsetMyPort();
      } else {
        setMyPort((Integer)value);
      }
      break;

    case ENTRIES:
      if (value == null) {
        unsetEntries();
      } else {
        setEntries((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MY_IP:
      return getMyIP();

    case MY_PORT:
      return Integer.valueOf(getMyPort());

    case ENTRIES:
      return getEntries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MY_IP:
      return isSetMyIP();
    case MY_PORT:
      return isSetMyPort();
    case ENTRIES:
      return isSetEntries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof messageProtocol)
      return this.equals((messageProtocol)that);
    return false;
  }

  public boolean equals(messageProtocol that) {
    if (that == null)
      return false;

    boolean this_present_myIP = true && this.isSetMyIP();
    boolean that_present_myIP = true && that.isSetMyIP();
    if (this_present_myIP || that_present_myIP) {
      if (!(this_present_myIP && that_present_myIP))
        return false;
      if (!this.myIP.equals(that.myIP))
        return false;
    }

    boolean this_present_myPort = true;
    boolean that_present_myPort = true;
    if (this_present_myPort || that_present_myPort) {
      if (!(this_present_myPort && that_present_myPort))
        return false;
      if (this.myPort != that.myPort)
        return false;
    }

    boolean this_present_entries = true && this.isSetEntries();
    boolean that_present_entries = true && that.isSetEntries();
    if (this_present_entries || that_present_entries) {
      if (!(this_present_entries && that_present_entries))
        return false;
      if (!this.entries.equals(that.entries))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_myIP = true && (isSetMyIP());
    list.add(present_myIP);
    if (present_myIP)
      list.add(myIP);

    boolean present_myPort = true;
    list.add(present_myPort);
    if (present_myPort)
      list.add(myPort);

    boolean present_entries = true && (isSetEntries());
    list.add(present_entries);
    if (present_entries)
      list.add(entries);

    return list.hashCode();
  }

  @Override
  public int compareTo(messageProtocol other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyIP()).compareTo(other.isSetMyIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myIP, other.myIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyPort()).compareTo(other.isSetMyPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myPort, other.myPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("messageProtocol(");
    boolean first = true;

    sb.append("myIP:");
    if (this.myIP == null) {
      sb.append("null");
    } else {
      sb.append(this.myIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myPort:");
    sb.append(this.myPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entries:");
    if (this.entries == null) {
      sb.append("null");
    } else {
      sb.append(this.entries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class messageProtocolStandardSchemeFactory implements SchemeFactory {
    public messageProtocolStandardScheme getScheme() {
      return new messageProtocolStandardScheme();
    }
  }

  private static class messageProtocolStandardScheme extends StandardScheme<messageProtocol> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, messageProtocol struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MY_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myIP = iprot.readString();
              struct.setMyIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myPort = iprot.readI32();
              struct.setMyPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entries = iprot.readString();
              struct.setEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, messageProtocol struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.myIP != null) {
        oprot.writeFieldBegin(MY_IP_FIELD_DESC);
        oprot.writeString(struct.myIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MY_PORT_FIELD_DESC);
      oprot.writeI32(struct.myPort);
      oprot.writeFieldEnd();
      if (struct.entries != null) {
        oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
        oprot.writeString(struct.entries);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class messageProtocolTupleSchemeFactory implements SchemeFactory {
    public messageProtocolTupleScheme getScheme() {
      return new messageProtocolTupleScheme();
    }
  }

  private static class messageProtocolTupleScheme extends TupleScheme<messageProtocol> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, messageProtocol struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyIP()) {
        optionals.set(0);
      }
      if (struct.isSetMyPort()) {
        optionals.set(1);
      }
      if (struct.isSetEntries()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMyIP()) {
        oprot.writeString(struct.myIP);
      }
      if (struct.isSetMyPort()) {
        oprot.writeI32(struct.myPort);
      }
      if (struct.isSetEntries()) {
        oprot.writeString(struct.entries);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, messageProtocol struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.myIP = iprot.readString();
        struct.setMyIPIsSet(true);
      }
      if (incoming.get(1)) {
        struct.myPort = iprot.readI32();
        struct.setMyPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entries = iprot.readString();
        struct.setEntriesIsSet(true);
      }
    }
  }

}

