/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lk.filetributed.client.rpc.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-7")
public class services {

  public interface Iface {

    public messageProtocol joinRequest(String ipAddress, int port, int clusterID) throws TException;

    public void mergeIPTable(messageProtocol ipTable) throws TException;

    public messageProtocol mergeFileTable(String ipAddress, int port, int clusterID, messageProtocol fileTable) throws TException;

    public searchResponse searchFile(String fileName) throws TException;

  }

  public interface AsyncIface {

    public void joinRequest(String ipAddress, int port, int clusterID, AsyncMethodCallback resultHandler) throws TException;

    public void mergeIPTable(messageProtocol ipTable, AsyncMethodCallback resultHandler) throws TException;

    public void mergeFileTable(String ipAddress, int port, int clusterID, messageProtocol fileTable, AsyncMethodCallback resultHandler) throws TException;

    public void searchFile(String fileName, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public messageProtocol joinRequest(String ipAddress, int port, int clusterID) throws TException
    {
      send_joinRequest(ipAddress, port, clusterID);
      return recv_joinRequest();
    }

    public void send_joinRequest(String ipAddress, int port, int clusterID) throws TException
    {
      joinRequest_args args = new joinRequest_args();
      args.setIpAddress(ipAddress);
      args.setPort(port);
      args.setClusterID(clusterID);
      sendBase("joinRequest", args);
    }

    public messageProtocol recv_joinRequest() throws TException
    {
      joinRequest_result result = new joinRequest_result();
      receiveBase(result, "joinRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinRequest failed: unknown result");
    }

    public void mergeIPTable(messageProtocol ipTable) throws TException
    {
      send_mergeIPTable(ipTable);
      recv_mergeIPTable();
    }

    public void send_mergeIPTable(messageProtocol ipTable) throws TException
    {
      mergeIPTable_args args = new mergeIPTable_args();
      args.setIpTable(ipTable);
      sendBase("mergeIPTable", args);
    }

    public void recv_mergeIPTable() throws TException
    {
      mergeIPTable_result result = new mergeIPTable_result();
      receiveBase(result, "mergeIPTable");
      return;
    }

    public messageProtocol mergeFileTable(String ipAddress, int port, int clusterID, messageProtocol fileTable) throws TException
    {
      send_mergeFileTable(ipAddress, port, clusterID, fileTable);
      return recv_mergeFileTable();
    }

    public void send_mergeFileTable(String ipAddress, int port, int clusterID, messageProtocol fileTable) throws TException
    {
      mergeFileTable_args args = new mergeFileTable_args();
      args.setIpAddress(ipAddress);
      args.setPort(port);
      args.setClusterID(clusterID);
      args.setFileTable(fileTable);
      sendBase("mergeFileTable", args);
    }

    public messageProtocol recv_mergeFileTable() throws TException
    {
      mergeFileTable_result result = new mergeFileTable_result();
      receiveBase(result, "mergeFileTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeFileTable failed: unknown result");
    }

    public searchResponse searchFile(String fileName) throws TException
    {
      send_searchFile(fileName);
      return recv_searchFile();
    }

    public void send_searchFile(String fileName) throws TException
    {
      searchFile_args args = new searchFile_args();
      args.setFileName(fileName);
      sendBase("searchFile", args);
    }

    public searchResponse recv_searchFile() throws TException
    {
      searchFile_result result = new searchFile_result();
      receiveBase(result, "searchFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void joinRequest(String ipAddress, int port, int clusterID, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      joinRequest_call method_call = new joinRequest_call(ipAddress, port, clusterID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ipAddress;
      private int port;
      private int clusterID;
      public joinRequest_call(String ipAddress, int port, int clusterID, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAddress = ipAddress;
        this.port = port;
        this.clusterID = clusterID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinRequest_args args = new joinRequest_args();
        args.setIpAddress(ipAddress);
        args.setPort(port);
        args.setClusterID(clusterID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public messageProtocol getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinRequest();
      }
    }

    public void mergeIPTable(messageProtocol ipTable, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      mergeIPTable_call method_call = new mergeIPTable_call(ipTable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeIPTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private messageProtocol ipTable;
      public mergeIPTable_call(messageProtocol ipTable, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipTable = ipTable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeIPTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeIPTable_args args = new mergeIPTable_args();
        args.setIpTable(ipTable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mergeIPTable();
      }
    }

    public void mergeFileTable(String ipAddress, int port, int clusterID, messageProtocol fileTable, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      mergeFileTable_call method_call = new mergeFileTable_call(ipAddress, port, clusterID, fileTable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeFileTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ipAddress;
      private int port;
      private int clusterID;
      private messageProtocol fileTable;
      public mergeFileTable_call(String ipAddress, int port, int clusterID, messageProtocol fileTable, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipAddress = ipAddress;
        this.port = port;
        this.clusterID = clusterID;
        this.fileTable = fileTable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeFileTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeFileTable_args args = new mergeFileTable_args();
        args.setIpAddress(ipAddress);
        args.setPort(port);
        args.setClusterID(clusterID);
        args.setFileTable(fileTable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public messageProtocol getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeFileTable();
      }
    }

    public void searchFile(String fileName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      searchFile_call method_call = new searchFile_call(fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fileName;
      public searchFile_call(String fileName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFile_args args = new searchFile_args();
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public searchResponse getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("joinRequest", new joinRequest());
      processMap.put("mergeIPTable", new mergeIPTable());
      processMap.put("mergeFileTable", new mergeFileTable());
      processMap.put("searchFile", new searchFile());
      return processMap;
    }

    public static class joinRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinRequest_args> {
      public joinRequest() {
        super("joinRequest");
      }

      public joinRequest_args getEmptyArgsInstance() {
        return new joinRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public joinRequest_result getResult(I iface, joinRequest_args args) throws TException {
        joinRequest_result result = new joinRequest_result();
        result.success = iface.joinRequest(args.ipAddress, args.port, args.clusterID);
        return result;
      }
    }

    public static class mergeIPTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeIPTable_args> {
      public mergeIPTable() {
        super("mergeIPTable");
      }

      public mergeIPTable_args getEmptyArgsInstance() {
        return new mergeIPTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeIPTable_result getResult(I iface, mergeIPTable_args args) throws TException {
        mergeIPTable_result result = new mergeIPTable_result();
        iface.mergeIPTable(args.ipTable);
        return result;
      }
    }

    public static class mergeFileTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeFileTable_args> {
      public mergeFileTable() {
        super("mergeFileTable");
      }

      public mergeFileTable_args getEmptyArgsInstance() {
        return new mergeFileTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeFileTable_result getResult(I iface, mergeFileTable_args args) throws TException {
        mergeFileTable_result result = new mergeFileTable_result();
        result.success = iface.mergeFileTable(args.ipAddress, args.port, args.clusterID, args.fileTable);
        return result;
      }
    }

    public static class searchFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFile_args> {
      public searchFile() {
        super("searchFile");
      }

      public searchFile_args getEmptyArgsInstance() {
        return new searchFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFile_result getResult(I iface, searchFile_args args) throws TException {
        searchFile_result result = new searchFile_result();
        result.success = iface.searchFile(args.fileName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("joinRequest", new joinRequest());
      processMap.put("mergeIPTable", new mergeIPTable());
      processMap.put("mergeFileTable", new mergeFileTable());
      processMap.put("searchFile", new searchFile());
      return processMap;
    }

    public static class joinRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinRequest_args, messageProtocol> {
      public joinRequest() {
        super("joinRequest");
      }

      public joinRequest_args getEmptyArgsInstance() {
        return new joinRequest_args();
      }

      public AsyncMethodCallback<messageProtocol> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<messageProtocol>() { 
          public void onComplete(messageProtocol o) {
            joinRequest_result result = new joinRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            joinRequest_result result = new joinRequest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinRequest_args args, AsyncMethodCallback<messageProtocol> resultHandler) throws TException {
        iface.joinRequest(args.ipAddress, args.port, args.clusterID,resultHandler);
      }
    }

    public static class mergeIPTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeIPTable_args, Void> {
      public mergeIPTable() {
        super("mergeIPTable");
      }

      public mergeIPTable_args getEmptyArgsInstance() {
        return new mergeIPTable_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            mergeIPTable_result result = new mergeIPTable_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeIPTable_result result = new mergeIPTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeIPTable_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.mergeIPTable(args.ipTable,resultHandler);
      }
    }

    public static class mergeFileTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeFileTable_args, messageProtocol> {
      public mergeFileTable() {
        super("mergeFileTable");
      }

      public mergeFileTable_args getEmptyArgsInstance() {
        return new mergeFileTable_args();
      }

      public AsyncMethodCallback<messageProtocol> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<messageProtocol>() { 
          public void onComplete(messageProtocol o) {
            mergeFileTable_result result = new mergeFileTable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeFileTable_result result = new mergeFileTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeFileTable_args args, AsyncMethodCallback<messageProtocol> resultHandler) throws TException {
        iface.mergeFileTable(args.ipAddress, args.port, args.clusterID, args.fileTable,resultHandler);
      }
    }

    public static class searchFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFile_args, searchResponse> {
      public searchFile() {
        super("searchFile");
      }

      public searchFile_args getEmptyArgsInstance() {
        return new searchFile_args();
      }

      public AsyncMethodCallback<searchResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<searchResponse>() { 
          public void onComplete(searchResponse o) {
            searchFile_result result = new searchFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchFile_result result = new searchFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFile_args args, AsyncMethodCallback<searchResponse> resultHandler) throws TException {
        iface.searchFile(args.fileName,resultHandler);
      }
    }

  }

  public static class joinRequest_args implements org.apache.thrift.TBase<joinRequest_args, joinRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinRequest_args");

    private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterID", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinRequest_argsTupleSchemeFactory());
    }

    public String ipAddress; // required
    public int port; // required
    public int clusterID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ADDRESS((short)1, "ipAddress"),
      PORT((short)2, "port"),
      CLUSTER_ID((short)3, "clusterID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ADDRESS
            return IP_ADDRESS;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_ID
            return CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __CLUSTERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinRequest_args.class, metaDataMap);
    }

    public joinRequest_args() {
    }

    public joinRequest_args(
      String ipAddress,
      int port,
      int clusterID)
    {
      this();
      this.ipAddress = ipAddress;
      this.port = port;
      setPortIsSet(true);
      this.clusterID = clusterID;
      setClusterIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinRequest_args(joinRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIpAddress()) {
        this.ipAddress = other.ipAddress;
      }
      this.port = other.port;
      this.clusterID = other.clusterID;
    }

    public joinRequest_args deepCopy() {
      return new joinRequest_args(this);
    }

    @Override
    public void clear() {
      this.ipAddress = null;
      setPortIsSet(false);
      this.port = 0;
      setClusterIDIsSet(false);
      this.clusterID = 0;
    }

    public String getIpAddress() {
      return this.ipAddress;
    }

    public joinRequest_args setIpAddress(String ipAddress) {
      this.ipAddress = ipAddress;
      return this;
    }

    public void unsetIpAddress() {
      this.ipAddress = null;
    }

    /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAddress() {
      return this.ipAddress != null;
    }

    public void setIpAddressIsSet(boolean value) {
      if (!value) {
        this.ipAddress = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public joinRequest_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getClusterID() {
      return this.clusterID;
    }

    public joinRequest_args setClusterID(int clusterID) {
      this.clusterID = clusterID;
      setClusterIDIsSet(true);
      return this;
    }

    public void unsetClusterID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLUSTERID_ISSET_ID);
    }

    /** Returns true if field clusterID is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterID() {
      return EncodingUtils.testBit(__isset_bitfield, __CLUSTERID_ISSET_ID);
    }

    public void setClusterIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLUSTERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP_ADDRESS:
        if (value == null) {
          unsetIpAddress();
        } else {
          setIpAddress((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetClusterID();
        } else {
          setClusterID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ADDRESS:
        return getIpAddress();

      case PORT:
        return Integer.valueOf(getPort());

      case CLUSTER_ID:
        return Integer.valueOf(getClusterID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP_ADDRESS:
        return isSetIpAddress();
      case PORT:
        return isSetPort();
      case CLUSTER_ID:
        return isSetClusterID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinRequest_args)
        return this.equals((joinRequest_args)that);
      return false;
    }

    public boolean equals(joinRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_ipAddress = true && this.isSetIpAddress();
      boolean that_present_ipAddress = true && that.isSetIpAddress();
      if (this_present_ipAddress || that_present_ipAddress) {
        if (!(this_present_ipAddress && that_present_ipAddress))
          return false;
        if (!this.ipAddress.equals(that.ipAddress))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterID = true;
      boolean that_present_clusterID = true;
      if (this_present_clusterID || that_present_clusterID) {
        if (!(this_present_clusterID && that_present_clusterID))
          return false;
        if (this.clusterID != that.clusterID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ipAddress = true && (isSetIpAddress());
      list.add(present_ipAddress);
      if (present_ipAddress)
        list.add(ipAddress);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_clusterID = true;
      list.add(present_clusterID);
      if (present_clusterID)
        list.add(clusterID);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClusterID()).compareTo(other.isSetClusterID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterID, other.clusterID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinRequest_args(");
      boolean first = true;

      sb.append("ipAddress:");
      if (this.ipAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterID:");
      sb.append(this.clusterID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinRequest_argsStandardSchemeFactory implements SchemeFactory {
      public joinRequest_argsStandardScheme getScheme() {
        return new joinRequest_argsStandardScheme();
      }
    }

    private static class joinRequest_argsStandardScheme extends StandardScheme<joinRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinRequest_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAddress = iprot.readString();
                struct.setIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clusterID = iprot.readI32();
                struct.setClusterIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinRequest_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAddress != null) {
          oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.ipAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
        oprot.writeI32(struct.clusterID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinRequest_argsTupleSchemeFactory implements SchemeFactory {
      public joinRequest_argsTupleScheme getScheme() {
        return new joinRequest_argsTupleScheme();
      }
    }

    private static class joinRequest_argsTupleScheme extends TupleScheme<joinRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinRequest_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIpAddress()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIpAddress()) {
          oprot.writeString(struct.ipAddress);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterID()) {
          oprot.writeI32(struct.clusterID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinRequest_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ipAddress = iprot.readString();
          struct.setIpAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterID = iprot.readI32();
          struct.setClusterIDIsSet(true);
        }
      }
    }

  }

  public static class joinRequest_result implements org.apache.thrift.TBase<joinRequest_result, joinRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinRequest_resultTupleSchemeFactory());
    }

    public messageProtocol success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, messageProtocol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinRequest_result.class, metaDataMap);
    }

    public joinRequest_result() {
    }

    public joinRequest_result(
      messageProtocol success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinRequest_result(joinRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new messageProtocol(other.success);
      }
    }

    public joinRequest_result deepCopy() {
      return new joinRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public messageProtocol getSuccess() {
      return this.success;
    }

    public joinRequest_result setSuccess(messageProtocol success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((messageProtocol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinRequest_result)
        return this.equals((joinRequest_result)that);
      return false;
    }

    public boolean equals(joinRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinRequest_resultStandardSchemeFactory implements SchemeFactory {
      public joinRequest_resultStandardScheme getScheme() {
        return new joinRequest_resultStandardScheme();
      }
    }

    private static class joinRequest_resultStandardScheme extends StandardScheme<joinRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinRequest_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new messageProtocol();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinRequest_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinRequest_resultTupleSchemeFactory implements SchemeFactory {
      public joinRequest_resultTupleScheme getScheme() {
        return new joinRequest_resultTupleScheme();
      }
    }

    private static class joinRequest_resultTupleScheme extends TupleScheme<joinRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinRequest_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinRequest_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new messageProtocol();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class mergeIPTable_args implements org.apache.thrift.TBase<mergeIPTable_args, mergeIPTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeIPTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeIPTable_args");

    private static final org.apache.thrift.protocol.TField IP_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipTable", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeIPTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeIPTable_argsTupleSchemeFactory());
    }

    public messageProtocol ipTable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_TABLE((short)1, "ipTable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_TABLE
            return IP_TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_TABLE, new org.apache.thrift.meta_data.FieldMetaData("ipTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, messageProtocol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeIPTable_args.class, metaDataMap);
    }

    public mergeIPTable_args() {
    }

    public mergeIPTable_args(
      messageProtocol ipTable)
    {
      this();
      this.ipTable = ipTable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeIPTable_args(mergeIPTable_args other) {
      if (other.isSetIpTable()) {
        this.ipTable = new messageProtocol(other.ipTable);
      }
    }

    public mergeIPTable_args deepCopy() {
      return new mergeIPTable_args(this);
    }

    @Override
    public void clear() {
      this.ipTable = null;
    }

    public messageProtocol getIpTable() {
      return this.ipTable;
    }

    public mergeIPTable_args setIpTable(messageProtocol ipTable) {
      this.ipTable = ipTable;
      return this;
    }

    public void unsetIpTable() {
      this.ipTable = null;
    }

    /** Returns true if field ipTable is set (has been assigned a value) and false otherwise */
    public boolean isSetIpTable() {
      return this.ipTable != null;
    }

    public void setIpTableIsSet(boolean value) {
      if (!value) {
        this.ipTable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP_TABLE:
        if (value == null) {
          unsetIpTable();
        } else {
          setIpTable((messageProtocol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_TABLE:
        return getIpTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP_TABLE:
        return isSetIpTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeIPTable_args)
        return this.equals((mergeIPTable_args)that);
      return false;
    }

    public boolean equals(mergeIPTable_args that) {
      if (that == null)
        return false;

      boolean this_present_ipTable = true && this.isSetIpTable();
      boolean that_present_ipTable = true && that.isSetIpTable();
      if (this_present_ipTable || that_present_ipTable) {
        if (!(this_present_ipTable && that_present_ipTable))
          return false;
        if (!this.ipTable.equals(that.ipTable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ipTable = true && (isSetIpTable());
      list.add(present_ipTable);
      if (present_ipTable)
        list.add(ipTable);

      return list.hashCode();
    }

    @Override
    public int compareTo(mergeIPTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIpTable()).compareTo(other.isSetIpTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipTable, other.ipTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeIPTable_args(");
      boolean first = true;

      sb.append("ipTable:");
      if (this.ipTable == null) {
        sb.append("null");
      } else {
        sb.append(this.ipTable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (ipTable != null) {
        ipTable.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeIPTable_argsStandardSchemeFactory implements SchemeFactory {
      public mergeIPTable_argsStandardScheme getScheme() {
        return new mergeIPTable_argsStandardScheme();
      }
    }

    private static class mergeIPTable_argsStandardScheme extends StandardScheme<mergeIPTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeIPTable_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipTable = new messageProtocol();
                struct.ipTable.read(iprot);
                struct.setIpTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeIPTable_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipTable != null) {
          oprot.writeFieldBegin(IP_TABLE_FIELD_DESC);
          struct.ipTable.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeIPTable_argsTupleSchemeFactory implements SchemeFactory {
      public mergeIPTable_argsTupleScheme getScheme() {
        return new mergeIPTable_argsTupleScheme();
      }
    }

    private static class mergeIPTable_argsTupleScheme extends TupleScheme<mergeIPTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeIPTable_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIpTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpTable()) {
          struct.ipTable.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeIPTable_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipTable = new messageProtocol();
          struct.ipTable.read(iprot);
          struct.setIpTableIsSet(true);
        }
      }
    }

  }

  public static class mergeIPTable_result implements org.apache.thrift.TBase<mergeIPTable_result, mergeIPTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeIPTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeIPTable_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeIPTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeIPTable_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeIPTable_result.class, metaDataMap);
    }

    public mergeIPTable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeIPTable_result(mergeIPTable_result other) {
    }

    public mergeIPTable_result deepCopy() {
      return new mergeIPTable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeIPTable_result)
        return this.equals((mergeIPTable_result)that);
      return false;
    }

    public boolean equals(mergeIPTable_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(mergeIPTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeIPTable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeIPTable_resultStandardSchemeFactory implements SchemeFactory {
      public mergeIPTable_resultStandardScheme getScheme() {
        return new mergeIPTable_resultStandardScheme();
      }
    }

    private static class mergeIPTable_resultStandardScheme extends StandardScheme<mergeIPTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeIPTable_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeIPTable_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeIPTable_resultTupleSchemeFactory implements SchemeFactory {
      public mergeIPTable_resultTupleScheme getScheme() {
        return new mergeIPTable_resultTupleScheme();
      }
    }

    private static class mergeIPTable_resultTupleScheme extends TupleScheme<mergeIPTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeIPTable_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeIPTable_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class mergeFileTable_args implements org.apache.thrift.TBase<mergeFileTable_args, mergeFileTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeFileTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeFileTable_args");

    private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FILE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileTable", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeFileTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeFileTable_argsTupleSchemeFactory());
    }

    public String ipAddress; // required
    public int port; // required
    public int clusterID; // required
    public messageProtocol fileTable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_ADDRESS((short)1, "ipAddress"),
      PORT((short)2, "port"),
      CLUSTER_ID((short)3, "clusterID"),
      FILE_TABLE((short)4, "fileTable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_ADDRESS
            return IP_ADDRESS;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_ID
            return CLUSTER_ID;
          case 4: // FILE_TABLE
            return FILE_TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __CLUSTERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("fileTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, messageProtocol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeFileTable_args.class, metaDataMap);
    }

    public mergeFileTable_args() {
    }

    public mergeFileTable_args(
      String ipAddress,
      int port,
      int clusterID,
      messageProtocol fileTable)
    {
      this();
      this.ipAddress = ipAddress;
      this.port = port;
      setPortIsSet(true);
      this.clusterID = clusterID;
      setClusterIDIsSet(true);
      this.fileTable = fileTable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeFileTable_args(mergeFileTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIpAddress()) {
        this.ipAddress = other.ipAddress;
      }
      this.port = other.port;
      this.clusterID = other.clusterID;
      if (other.isSetFileTable()) {
        this.fileTable = new messageProtocol(other.fileTable);
      }
    }

    public mergeFileTable_args deepCopy() {
      return new mergeFileTable_args(this);
    }

    @Override
    public void clear() {
      this.ipAddress = null;
      setPortIsSet(false);
      this.port = 0;
      setClusterIDIsSet(false);
      this.clusterID = 0;
      this.fileTable = null;
    }

    public String getIpAddress() {
      return this.ipAddress;
    }

    public mergeFileTable_args setIpAddress(String ipAddress) {
      this.ipAddress = ipAddress;
      return this;
    }

    public void unsetIpAddress() {
      this.ipAddress = null;
    }

    /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAddress() {
      return this.ipAddress != null;
    }

    public void setIpAddressIsSet(boolean value) {
      if (!value) {
        this.ipAddress = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public mergeFileTable_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getClusterID() {
      return this.clusterID;
    }

    public mergeFileTable_args setClusterID(int clusterID) {
      this.clusterID = clusterID;
      setClusterIDIsSet(true);
      return this;
    }

    public void unsetClusterID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLUSTERID_ISSET_ID);
    }

    /** Returns true if field clusterID is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterID() {
      return EncodingUtils.testBit(__isset_bitfield, __CLUSTERID_ISSET_ID);
    }

    public void setClusterIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLUSTERID_ISSET_ID, value);
    }

    public messageProtocol getFileTable() {
      return this.fileTable;
    }

    public mergeFileTable_args setFileTable(messageProtocol fileTable) {
      this.fileTable = fileTable;
      return this;
    }

    public void unsetFileTable() {
      this.fileTable = null;
    }

    /** Returns true if field fileTable is set (has been assigned a value) and false otherwise */
    public boolean isSetFileTable() {
      return this.fileTable != null;
    }

    public void setFileTableIsSet(boolean value) {
      if (!value) {
        this.fileTable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP_ADDRESS:
        if (value == null) {
          unsetIpAddress();
        } else {
          setIpAddress((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetClusterID();
        } else {
          setClusterID((Integer)value);
        }
        break;

      case FILE_TABLE:
        if (value == null) {
          unsetFileTable();
        } else {
          setFileTable((messageProtocol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_ADDRESS:
        return getIpAddress();

      case PORT:
        return Integer.valueOf(getPort());

      case CLUSTER_ID:
        return Integer.valueOf(getClusterID());

      case FILE_TABLE:
        return getFileTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP_ADDRESS:
        return isSetIpAddress();
      case PORT:
        return isSetPort();
      case CLUSTER_ID:
        return isSetClusterID();
      case FILE_TABLE:
        return isSetFileTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeFileTable_args)
        return this.equals((mergeFileTable_args)that);
      return false;
    }

    public boolean equals(mergeFileTable_args that) {
      if (that == null)
        return false;

      boolean this_present_ipAddress = true && this.isSetIpAddress();
      boolean that_present_ipAddress = true && that.isSetIpAddress();
      if (this_present_ipAddress || that_present_ipAddress) {
        if (!(this_present_ipAddress && that_present_ipAddress))
          return false;
        if (!this.ipAddress.equals(that.ipAddress))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterID = true;
      boolean that_present_clusterID = true;
      if (this_present_clusterID || that_present_clusterID) {
        if (!(this_present_clusterID && that_present_clusterID))
          return false;
        if (this.clusterID != that.clusterID)
          return false;
      }

      boolean this_present_fileTable = true && this.isSetFileTable();
      boolean that_present_fileTable = true && that.isSetFileTable();
      if (this_present_fileTable || that_present_fileTable) {
        if (!(this_present_fileTable && that_present_fileTable))
          return false;
        if (!this.fileTable.equals(that.fileTable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ipAddress = true && (isSetIpAddress());
      list.add(present_ipAddress);
      if (present_ipAddress)
        list.add(ipAddress);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_clusterID = true;
      list.add(present_clusterID);
      if (present_clusterID)
        list.add(clusterID);

      boolean present_fileTable = true && (isSetFileTable());
      list.add(present_fileTable);
      if (present_fileTable)
        list.add(fileTable);

      return list.hashCode();
    }

    @Override
    public int compareTo(mergeFileTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClusterID()).compareTo(other.isSetClusterID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterID, other.clusterID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileTable()).compareTo(other.isSetFileTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileTable, other.fileTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeFileTable_args(");
      boolean first = true;

      sb.append("ipAddress:");
      if (this.ipAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterID:");
      sb.append(this.clusterID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileTable:");
      if (this.fileTable == null) {
        sb.append("null");
      } else {
        sb.append(this.fileTable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (fileTable != null) {
        fileTable.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeFileTable_argsStandardSchemeFactory implements SchemeFactory {
      public mergeFileTable_argsStandardScheme getScheme() {
        return new mergeFileTable_argsStandardScheme();
      }
    }

    private static class mergeFileTable_argsStandardScheme extends StandardScheme<mergeFileTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeFileTable_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAddress = iprot.readString();
                struct.setIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clusterID = iprot.readI32();
                struct.setClusterIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILE_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileTable = new messageProtocol();
                struct.fileTable.read(iprot);
                struct.setFileTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeFileTable_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipAddress != null) {
          oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.ipAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
        oprot.writeI32(struct.clusterID);
        oprot.writeFieldEnd();
        if (struct.fileTable != null) {
          oprot.writeFieldBegin(FILE_TABLE_FIELD_DESC);
          struct.fileTable.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeFileTable_argsTupleSchemeFactory implements SchemeFactory {
      public mergeFileTable_argsTupleScheme getScheme() {
        return new mergeFileTable_argsTupleScheme();
      }
    }

    private static class mergeFileTable_argsTupleScheme extends TupleScheme<mergeFileTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeFileTable_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIpAddress()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterID()) {
          optionals.set(2);
        }
        if (struct.isSetFileTable()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIpAddress()) {
          oprot.writeString(struct.ipAddress);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterID()) {
          oprot.writeI32(struct.clusterID);
        }
        if (struct.isSetFileTable()) {
          struct.fileTable.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeFileTable_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ipAddress = iprot.readString();
          struct.setIpAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterID = iprot.readI32();
          struct.setClusterIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fileTable = new messageProtocol();
          struct.fileTable.read(iprot);
          struct.setFileTableIsSet(true);
        }
      }
    }

  }

  public static class mergeFileTable_result implements org.apache.thrift.TBase<mergeFileTable_result, mergeFileTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeFileTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeFileTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeFileTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeFileTable_resultTupleSchemeFactory());
    }

    public messageProtocol success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, messageProtocol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeFileTable_result.class, metaDataMap);
    }

    public mergeFileTable_result() {
    }

    public mergeFileTable_result(
      messageProtocol success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeFileTable_result(mergeFileTable_result other) {
      if (other.isSetSuccess()) {
        this.success = new messageProtocol(other.success);
      }
    }

    public mergeFileTable_result deepCopy() {
      return new mergeFileTable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public messageProtocol getSuccess() {
      return this.success;
    }

    public mergeFileTable_result setSuccess(messageProtocol success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((messageProtocol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeFileTable_result)
        return this.equals((mergeFileTable_result)that);
      return false;
    }

    public boolean equals(mergeFileTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(mergeFileTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeFileTable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeFileTable_resultStandardSchemeFactory implements SchemeFactory {
      public mergeFileTable_resultStandardScheme getScheme() {
        return new mergeFileTable_resultStandardScheme();
      }
    }

    private static class mergeFileTable_resultStandardScheme extends StandardScheme<mergeFileTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeFileTable_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new messageProtocol();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeFileTable_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeFileTable_resultTupleSchemeFactory implements SchemeFactory {
      public mergeFileTable_resultTupleScheme getScheme() {
        return new mergeFileTable_resultTupleScheme();
      }
    }

    private static class mergeFileTable_resultTupleScheme extends TupleScheme<mergeFileTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeFileTable_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeFileTable_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new messageProtocol();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchFile_args implements org.apache.thrift.TBase<searchFile_args, searchFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFile_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchFile_argsTupleSchemeFactory());
    }

    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFile_args.class, metaDataMap);
    }

    public searchFile_args() {
    }

    public searchFile_args(
      String fileName)
    {
      this();
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFile_args(searchFile_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public searchFile_args deepCopy() {
      return new searchFile_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
    }

    public String getFileName() {
      return this.fileName;
    }

    public searchFile_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFile_args)
        return this.equals((searchFile_args)that);
      return false;
    }

    public boolean equals(searchFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchFile_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFile_argsStandardSchemeFactory implements SchemeFactory {
      public searchFile_argsStandardScheme getScheme() {
        return new searchFile_argsStandardScheme();
      }
    }

    private static class searchFile_argsStandardScheme extends StandardScheme<searchFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFile_argsTupleSchemeFactory implements SchemeFactory {
      public searchFile_argsTupleScheme getScheme() {
        return new searchFile_argsTupleScheme();
      }
    }

    private static class searchFile_argsTupleScheme extends TupleScheme<searchFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class searchFile_result implements org.apache.thrift.TBase<searchFile_result, searchFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchFile_resultTupleSchemeFactory());
    }

    public searchResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, searchResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFile_result.class, metaDataMap);
    }

    public searchFile_result() {
    }

    public searchFile_result(
      searchResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFile_result(searchFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new searchResponse(other.success);
      }
    }

    public searchFile_result deepCopy() {
      return new searchFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public searchResponse getSuccess() {
      return this.success;
    }

    public searchFile_result setSuccess(searchResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((searchResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFile_result)
        return this.equals((searchFile_result)that);
      return false;
    }

    public boolean equals(searchFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFile_resultStandardSchemeFactory implements SchemeFactory {
      public searchFile_resultStandardScheme getScheme() {
        return new searchFile_resultStandardScheme();
      }
    }

    private static class searchFile_resultStandardScheme extends StandardScheme<searchFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new searchResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFile_resultTupleSchemeFactory implements SchemeFactory {
      public searchFile_resultTupleScheme getScheme() {
        return new searchFile_resultTupleScheme();
      }
    }

    private static class searchFile_resultTupleScheme extends TupleScheme<searchFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new searchResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
